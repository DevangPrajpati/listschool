'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _lodash = require('lodash.clonedeep');

var _lodash2 = _interopRequireDefault(_lodash);

var _Bridge2 = require('./Bridge');

var _Bridge3 = _interopRequireDefault(_Bridge2);

var _joinName = require('../helpers/joinName');

var _joinName2 = _interopRequireDefault(_joinName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SimpleSchema = ((typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' ? global : window).SimpleSchema;
var Match = ((typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' ? global : window).Match;

try {
    if (Match === undefined) {
        Match = require('meteor/check').Match;
    }

    if (SimpleSchema === undefined) {
        SimpleSchema = require('meteor/aldeed:simple-schema').SimpleSchema;
    }

    SimpleSchema.extendOptions({
        uniforms: Match.Optional(Match.OneOf(String, Function, Match.ObjectIncluding({
            component: Match.Optional(Match.OneOf(String, Function))
        })))
    });
} catch (_) {
    // eslint-disable-line
}

var SimpleSchemaBridge = function (_Bridge) {
    _inherits(SimpleSchemaBridge, _Bridge);

    function SimpleSchemaBridge() {
        _classCallCheck(this, SimpleSchemaBridge);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(SimpleSchemaBridge).apply(this, arguments));
    }

    _createClass(SimpleSchemaBridge, [{
        key: 'getError',
        value: function getError(name, error) {
            return error && error.details && error.details.find && error.details.find(function (error) {
                return error.name === name;
            });
        }
    }, {
        key: 'getErrorMessage',
        value: function getErrorMessage(name, error) {
            var scopedError = this.getError(name, error);
            if (scopedError) {
                return this.schema.messageForError(scopedError.type, scopedError.name, null, scopedError.details && scopedError.details.value);
            }

            return '';
        }
    }, {
        key: 'getErrorMessages',
        value: function getErrorMessages(error) {
            var _this2 = this;

            return (error && error.details || []).map(function (error) {
                return _this2.schema.messageForError(error.type, error.name, null, error.details && error.details.value);
            });
        }
    }, {
        key: 'getField',
        value: function getField(name) {
            var definition = this.schema.getDefinition(name);
            if (definition) {
                return definition;
            }

            throw new Error('Field not found in schema: \'' + name + '\'');
        }
    }, {
        key: 'getInitialValue',
        value: function getInitialValue(name) {
            var _this3 = this;

            var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            var field = this.getField(name);

            if (field.type === Array) {
                var _ret = function () {
                    var item = _this3.getInitialValue((0, _joinName2.default)(name, '0'));
                    var items = Math.max(props.initialCount || 0, field.minCount || 0);

                    return {
                        v: [].concat(_toConsumableArray(Array(items))).map(function () {
                            return item;
                        })
                    };
                }();

                if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
            }

            return field.defaultValue ? field.defaultValue : field.allowedValues ? field.allowedValues[0] : field.type === Date || field.type === Number ? field.min !== undefined ? field.min : field.max !== undefined ? field.max : field.type === Number ? 0 : new Date() : field.type();
        }
    }, {
        key: 'getProps',
        value: function getProps(name) {
            var _getField = this.getField(name);

            var optional = _getField.optional;
            var uniforms = _getField.uniforms;

            var field = _objectWithoutProperties(_getField, ['optional', 'uniforms']);

            field = _extends({}, field, { required: !optional });

            if (uniforms) {
                if (typeof uniforms === 'string' || typeof uniforms === 'function') {
                    return _extends({}, field, { component: uniforms });
                }

                return _extends({}, field, uniforms);
            }

            return field;
        }
    }, {
        key: 'getSubfields',
        value: function getSubfields(name) {
            return this.schema.objectKeys(SimpleSchema._makeGeneric(name));
        }
    }, {
        key: 'getType',
        value: function getType(name) {
            return this.getField(name).type;
        }
    }, {
        key: 'getValidator',
        value: function getValidator() {
            var options = arguments.length <= 0 || arguments[0] === undefined ? { clean: true } : arguments[0];

            var validator = this.schema.validator(options);
            return function (model) {
                return validator((0, _lodash2.default)(model));
            };
        }
    }], [{
        key: 'check',
        value: function check(schema) {
            return SimpleSchema && schema && schema.getDefinition && schema.messageForError && schema.objectKeys && schema.validator;
        }
    }]);

    return SimpleSchemaBridge;
}(_Bridge3.default);

exports.default = SimpleSchemaBridge;