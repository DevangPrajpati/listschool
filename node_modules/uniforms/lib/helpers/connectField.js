'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

exports.default = connectField;

var _react = require('react');

var _BaseField = require('../components/fields/BaseField');

var _BaseField2 = _interopRequireDefault(_BaseField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function connectField(component) {
    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var _ref$mapProps = _ref.mapProps;
    var mapProps = _ref$mapProps === undefined ? function (x) {
        return x;
    } : _ref$mapProps;
    var _ref$baseField = _ref.baseField;
    var baseField = _ref$baseField === undefined ? _BaseField2.default : _ref$baseField;
    var _ref$initialValue = _ref.initialValue;
    var initialValue = _ref$initialValue === undefined ? true : _ref$initialValue;
    var _ref$includeParent = _ref.includeParent;
    var includeParent = _ref$includeParent === undefined ? false : _ref$includeParent;
    var _ref$includeInChain = _ref.includeInChain;
    var includeInChain = _ref$includeInChain === undefined ? true : _ref$includeInChain;

    var Field = function (_baseField) {
        _inherits(Field, _baseField);

        function Field() {
            _classCallCheck(this, Field);

            return _possibleConstructorReturn(this, Object.getPrototypeOf(Field).apply(this, arguments));
        }

        _createClass(Field, [{
            key: 'getChildContextName',
            value: function getChildContextName() {
                return includeInChain ? _get(Object.getPrototypeOf(Field.prototype), 'getChildContextName', this).call(this) : this.context.uniforms.name;
            }
        }, {
            key: 'render',
            value: function render() {
                return (0, _react.createElement)(component, mapProps(this.getFieldProps(undefined, { includeParent: includeParent })));
            }
        }, {
            key: 'componentWillMount',
            value: function componentWillMount() {
                if (initialValue) {
                    var props = this.getFieldProps(undefined, { explicitInitialValue: true, includeParent: false });
                    if (props.value === undefined && !props.field.optional) {
                        props.onChange(props.initialValue);
                    }
                }
            }
        }]);

        return Field;
    }(baseField);

    Field.displayName = (baseField.displayName || baseField.name) + '(' + (component.displayName || component.name) + ')';

    return Field;
}