'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash.get');

var _lodash2 = _interopRequireDefault(_lodash);

var _react = require('react');

var _BaseForm = require('../forms/BaseForm');

var _BaseForm2 = _interopRequireDefault(_BaseForm);

var _joinName = require('../../helpers/joinName');

var _joinName2 = _interopRequireDefault(_joinName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BaseField = function (_Component) {
    _inherits(BaseField, _Component);

    function BaseField() {
        _classCallCheck(this, BaseField);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(BaseField).apply(this, arguments));

        _this.getFieldProps = _this.getFieldProps.bind(_this);

        _this.getChildContextName = _this.getChildContextName.bind(_this);
        _this.getChildContextError = _this.getChildContextError.bind(_this);
        _this.getChildContextModel = _this.getChildContextModel.bind(_this);
        _this.getChildContextState = _this.getChildContextState.bind(_this);
        _this.getChildContextSchema = _this.getChildContextSchema.bind(_this);
        _this.getChildContextOnChange = _this.getChildContextOnChange.bind(_this);
        return _this;
    }

    _createClass(BaseField, [{
        key: 'getChildContext',
        value: function getChildContext() {
            return {
                uniforms: {
                    name: this.getChildContextName(),
                    error: this.getChildContextError(),
                    model: this.getChildContextModel(),
                    state: this.getChildContextState(),
                    schema: this.getChildContextSchema(),
                    onChange: this.getChildContextOnChange()
                }
            };
        }
    }, {
        key: 'getChildContextName',
        value: function getChildContextName() {
            return (0, _joinName2.default)(null, this.context.uniforms.name, this.props.name);
        }
    }, {
        key: 'getChildContextError',
        value: function getChildContextError() {
            return this.context.uniforms.error;
        }
    }, {
        key: 'getChildContextModel',
        value: function getChildContextModel() {
            return this.context.uniforms.model;
        }
    }, {
        key: 'getChildContextState',
        value: function getChildContextState() {
            var state = this.context.uniforms.state;
            var props = this.props;

            var propagate = function propagate(name) {
                return props[name] === undefined || props[name] === null ? state[name] : !!props[name];
            };

            return _extends({}, state, {

                label: propagate('label'),
                disabled: propagate('disabled'),
                placeholder: propagate('placeholder')
            });
        }
    }, {
        key: 'getChildContextSchema',
        value: function getChildContextSchema() {
            return this.context.uniforms.schema;
        }
    }, {
        key: 'getChildContextOnChange',
        value: function getChildContextOnChange() {
            return this.context.uniforms.onChange;
        }

        // eslint-disable-next-line complexity

    }, {
        key: 'getFieldProps',
        value: function getFieldProps(name) {
            var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            var _ref$explicitInitialV = _ref.explicitInitialValue;
            var explicitInitialValue = _ref$explicitInitialV === undefined ? false : _ref$explicitInitialV;
            var _ref$includeParent = _ref.includeParent;
            var includeParent = _ref$includeParent === undefined ? false : _ref$includeParent;

            var context = this.context.uniforms;
            var props = _extends({}, this.getChildContextState(), this.props);

            if (name === undefined) {
                name = (0, _joinName2.default)(context.name, props.name);
            }

            var field = context.schema.getField(name);
            var schemaProps = context.schema.getProps(name);

            var type = context.schema.getType(name);
            var error = context.schema.getError(name, context.error);
            var fields = context.schema.getSubfields(name);
            var parent = includeParent && name.indexOf('.') !== -1 ? this.getFieldProps(name.replace(/(.+)\..+$/, '$1'), { includeParent: false }) : null;

            var errorMessage = context.schema.getErrorMessage(name, context.error);

            var label = props.label ? props.label === true ? schemaProps.label : props.label : props.label === null ? null : '';

            var placeholder = props.placeholder ? props.placeholder === true ? schemaProps.label : props.placeholder : '';

            var changed = !!(0, _lodash2.default)(context.state.changedMap, name);

            var value = (0, _lodash2.default)(context.model, name);
            if (value === undefined && !explicitInitialValue) {
                value = context.schema.getInitialValue(name, this.props);
            } else if (explicitInitialValue) {
                props.initialValue = context.schema.getInitialValue(name, this.props);
            }

            var findError = function findError(name) {
                return context.error && context.error.details && context.error.details.find && context.error.details.find(function (error) {
                    return error.name === name;
                });
            };
            var findValue = function findValue(name) {
                return (0, _lodash2.default)(context.model, name);
            };
            var findField = function findField(name) {
                return context.schema.getField(name);
            };

            var onChange = function onChange(value) {
                var key = arguments.length <= 1 || arguments[1] === undefined ? name : arguments[1];
                return context.onChange(key, value);
            };

            return _extends({
                changed: changed,
                error: error,
                errorMessage: errorMessage,
                field: field,
                fields: fields,
                findError: findError,
                findField: findField,
                findValue: findValue,
                onChange: onChange,
                parent: parent,
                type: type,
                value: value

            }, schemaProps, props, {

                label: label,
                name: name,
                placeholder: placeholder
            });
        }
    }]);

    return BaseField;
}(_react.Component);

BaseField.defaultProps = {
    id: Math.random().toString(36).substr(2, 16)
};
BaseField.propTypes = {
    id: _react.PropTypes.string,

    name: _react.PropTypes.string,
    disabled: _react.PropTypes.bool,

    label: _react.PropTypes.oneOfType([_react.PropTypes.bool, _react.PropTypes.string]),
    placeholder: _react.PropTypes.oneOfType([_react.PropTypes.bool, _react.PropTypes.string])
};
BaseField.contextTypes = _BaseForm2.default.childContextTypes;
BaseField.childContextTypes = _BaseForm2.default.childContextTypes;
exports.default = BaseField;