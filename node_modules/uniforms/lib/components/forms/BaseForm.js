'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash.clonedeep');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.get');

var _lodash4 = _interopRequireDefault(_lodash3);

var _lodash5 = require('lodash.set');

var _lodash6 = _interopRequireDefault(_lodash5);

var _changedKeys = require('../../helpers/changedKeys');

var _changedKeys2 = _interopRequireDefault(_changedKeys);

var _bridges = require('../../bridges');

var _bridges2 = _interopRequireDefault(_bridges);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BaseForm = function (_Component) {
    _inherits(BaseForm, _Component);

    function BaseForm() {
        _classCallCheck(this, BaseForm);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(BaseForm).apply(this, arguments));

        _this.state = {
            bridge: (0, _bridges2.default)(_this.props.schema),

            changed: null,
            changedMap: {}
        };

        _this.onChange = _this.onChange.bind(_this);
        _this.onSubmit = _this.onSubmit.bind(_this);

        _this.getModel = _this.getModel.bind(_this);
        _this.getChangedKeys = _this.getChangedKeys.bind(_this);
        _this.getNativeFormProps = _this.getNativeFormProps.bind(_this);

        _this.getChildContextName = _this.getChildContextName.bind(_this);
        _this.getChildContextError = _this.getChildContextError.bind(_this);
        _this.getChildContextModel = _this.getChildContextModel.bind(_this);
        _this.getChildContextState = _this.getChildContextState.bind(_this);
        _this.getChildContextSchema = _this.getChildContextSchema.bind(_this);
        _this.getChildContextOnChange = _this.getChildContextOnChange.bind(_this);
        return _this;
    }

    _createClass(BaseForm, [{
        key: 'getChildContext',
        value: function getChildContext() {
            return {
                uniforms: {
                    name: this.getChildContextName(),
                    error: this.getChildContextError(),
                    model: this.getChildContextModel(),
                    state: this.getChildContextState(),
                    schema: this.getChildContextSchema(),
                    onChange: this.getChildContextOnChange()
                }
            };
        }
    }, {
        key: 'getChildContextName',
        value: function getChildContextName() {
            return [];
        }
    }, {
        key: 'getChildContextError',
        value: function getChildContextError() {
            return this.props.error;
        }
    }, {
        key: 'getChildContextModel',
        value: function getChildContextModel() {
            return this.props.model;
        }
    }, {
        key: 'getChildContextState',
        value: function getChildContextState() {
            return {
                changed: !!this.state.changed,
                changedMap: this.state.changedMap,

                label: !!this.props.label,
                disabled: !!this.props.disabled,
                placeholder: !!this.props.placeholder
            };
        }
    }, {
        key: 'getChildContextSchema',
        value: function getChildContextSchema() {
            return this.state.bridge;
        }
    }, {
        key: 'getChildContextOnChange',
        value: function getChildContextOnChange() {
            return this.onChange;
        }
    }, {
        key: 'getModel',
        value: function getModel() {
            return this.getChildContextModel();
        }
    }, {
        key: 'componentWillMount',
        value: function componentWillMount() {
            var _this2 = this;

            this.setState({}, function () {
                return _this2.setState({ changed: false });
            });
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(_ref) {
            var schema = _ref.schema;

            if (this.props.schema !== schema) {
                this.setState({ bridge: (0, _bridges2.default)(schema) });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement('form', this.getNativeFormProps());
        }
    }, {
        key: 'getChangedKeys',
        value: function getChangedKeys(root, valueA, valueB) {
            return (0, _changedKeys2.default)(root, valueA, valueB);
        }
    }, {
        key: 'getNativeFormProps',
        value: function getNativeFormProps() {
            return _extends({}, this.props, {
                onChange: function onChange() {},

                onSubmit: this.onSubmit
            });
        }
    }, {
        key: 'onChange',
        value: function onChange(key, value) {
            var _this3 = this;

            // Do not set `changed` before componentDidMount
            if (this.state.changed !== null) {
                this.setState({ changed: true });
                this.getChangedKeys(key, value, (0, _lodash4.default)(this.getChildContextModel(), key)).forEach(function (key) {
                    return _this3.setState(function (state) {
                        return (0, _lodash4.default)(state.changedMap, key) ? {} : { changedMap: (0, _lodash6.default)((0, _lodash2.default)(state.changedMap), key, {}) };
                    });
                });
            }

            if (this.props.onChange) {
                this.props.onChange(key, value);
            }

            // Do not call `onSubmit` before componentDidMount
            if (this.state.changed !== null && this.props.autosave) {
                this.onSubmit();
            }
        }
    }, {
        key: 'onSubmit',
        value: function onSubmit(event) {
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }

            if (this.props.onSubmit) {
                this.props.onSubmit(this.getModel());
            }
        }
    }]);

    return BaseForm;
}(_react.Component);

BaseForm.displayName = 'Form';
BaseForm.defaultProps = {
    model: {},
    label: true
};
BaseForm.propTypes = {
    error: _react.PropTypes.any,
    model: _react.PropTypes.any,
    schema: _react.PropTypes.any.isRequired,

    onChange: _react.PropTypes.func,
    onSubmit: _react.PropTypes.func,

    label: _react.PropTypes.bool,
    autosave: _react.PropTypes.bool,
    disabled: _react.PropTypes.bool,
    placeholder: _react.PropTypes.bool
};
BaseForm.childContextTypes = {
    uniforms: _react.PropTypes.shape({
        name: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired,

        error: _react.PropTypes.object,
        model: _react.PropTypes.object.isRequired,

        schema: _react.PropTypes.shape({
            getError: _react.PropTypes.func.isRequired,
            getErrorMessage: _react.PropTypes.func.isRequired,
            getErrorMessages: _react.PropTypes.func.isRequired,
            getField: _react.PropTypes.func.isRequired,
            getInitialValue: _react.PropTypes.func.isRequired,
            getProps: _react.PropTypes.func.isRequired,
            getSubfields: _react.PropTypes.func.isRequired,
            getType: _react.PropTypes.func.isRequired,
            getValidator: _react.PropTypes.func.isRequired
        }).isRequired,

        state: _react.PropTypes.shape({
            changed: _react.PropTypes.bool.isRequired,
            changedMap: _react.PropTypes.object.isRequired,

            label: _react.PropTypes.bool.isRequired,
            disabled: _react.PropTypes.bool.isRequired,
            placeholder: _react.PropTypes.bool.isRequired
        }).isRequired,

        onChange: _react.PropTypes.func.isRequired
    }).isRequired
};
exports.default = BaseForm;