'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _BaseForm = require('./BaseForm');

var _BaseForm2 = _interopRequireDefault(_BaseForm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Quick = function Quick(parent) {
    var _class, _temp;

    return _temp = _class = function (_parent) {
        _inherits(_class, _parent);

        function _class() {
            _classCallCheck(this, _class);

            var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(_class).apply(this, arguments));

            _this.getAutoField = _this.getAutoField.bind(_this);
            _this.getErrorsField = _this.getErrorsField.bind(_this);
            _this.getSubmitField = _this.getSubmitField.bind(_this);
            return _this;
        }

        _createClass(_class, [{
            key: 'render',
            value: function render() {
                var nativeFormProps = this.getNativeFormProps();
                if (nativeFormProps.children) {
                    return _get(Object.getPrototypeOf(_class.prototype), 'render', this).call(this);
                }

                var AutoField = this.getAutoField();
                var ErrorsField = this.getErrorsField();
                var SubmitField = this.getSubmitField();

                return _react2.default.createElement(
                    'form',
                    nativeFormProps,
                    this.getChildContextSchema().getSubfields().map(function (key) {
                        return _react2.default.createElement(AutoField, { key: key, name: key });
                    }),
                    _react2.default.createElement(ErrorsField, null),
                    _react2.default.createElement(SubmitField, null)
                );
            }
        }, {
            key: 'getAutoField',
            value: function getAutoField() {
                return function () {
                    return null;
                };
            }
        }, {
            key: 'getErrorsField',
            value: function getErrorsField() {
                return function () {
                    return null;
                };
            }
        }, {
            key: 'getSubmitField',
            value: function getSubmitField() {
                return function () {
                    return null;
                };
            }
        }]);

        return _class;
    }(parent), _class.Quick = Quick, _class.displayName = 'Quick' + parent.displayName, _temp;
};

exports.default = Quick(_BaseForm2.default);