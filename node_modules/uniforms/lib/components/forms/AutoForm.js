'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash.clonedeep');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.isequal');

var _lodash4 = _interopRequireDefault(_lodash3);

var _lodash5 = require('lodash.set');

var _lodash6 = _interopRequireDefault(_lodash5);

var _ValidatedQuickForm = require('./ValidatedQuickForm');

var _ValidatedQuickForm2 = _interopRequireDefault(_ValidatedQuickForm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Auto = function Auto(parent) {
    var _class, _temp;

    return _temp = _class = function (_parent) {
        _inherits(_class, _parent);

        function _class() {
            _classCallCheck(this, _class);

            var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(_class).apply(this, arguments));

            _this.state = _extends({}, _this.state, {

                model: _this.props.model,
                modelSync: _this.props.model
            });
            return _this;
        }

        _createClass(_class, [{
            key: 'componentWillReceiveProps',
            value: function componentWillReceiveProps(_ref) {
                var model = _ref.model;

                _get(Object.getPrototypeOf(_class.prototype), 'componentWillReceiveProps', this).apply(this, arguments);

                if (!(0, _lodash4.default)(this.props.model, model)) {
                    this.setState({ model: model, modelSync: model });
                }
            }
        }, {
            key: 'getChildContextModel',
            value: function getChildContextModel() {
                return this.state.modelSync;
            }
        }, {
            key: 'getModel',
            value: function getModel() {
                return this.state.model;
            }
        }, {
            key: 'validate',
            value: function validate() {
                this.validateModel(this.getModel());
            }
        }, {
            key: 'onChange',
            value: function onChange(key, value) {
                var _this2 = this,
                    _arguments = arguments;

                this.setState(function (state) {
                    return { model: (0, _lodash6.default)((0, _lodash2.default)(state.model), key, value) };
                }, function () {
                    _get(Object.getPrototypeOf(_class.prototype), 'onChange', _this2).apply(_this2, _arguments);
                    _this2.setState({ modelSync: _this2.state.model });
                });
            }
        }]);

        return _class;
    }(parent), _class.Auto = Auto, _class.displayName = 'Auto' + parent.displayName, _temp;
};

exports.default = Auto(_ValidatedQuickForm2.default);